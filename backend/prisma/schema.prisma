generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  supabaseId String   @unique @map("supabase_id")
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // New fields for profile editing
  isConnecting    Boolean  @default(true)
  firstName       String?
  lastName        String?
  location        String?
  birthDate       String?
  favoriteSports  String?
  profileImageUrl String?

  // Relationship for ratings
  ratings     UserRating[]
  taglines    UserTagline[]

  @@map("users")
}

model Sport {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  teams    Team[]
  athletes Athlete[]

  @@map("sports")
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  sportId   Int       @map("sport_id")
  sport     Sport     @relation(fields: [sportId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  athletes Athlete[]

  @@unique([name, sportId])
  @@index([sportId])
  @@map("teams")
}

model Athlete {
  id        Int       @id @default(autoincrement())
  name      String
  sportId   Int       @map("sport_id")
  teamId    Int       @map("team_id")
  sport     Sport     @relation(fields: [sportId], references: [id])
  team      Team      @relation(fields: [teamId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([sportId])
  @@index([teamId])
  @@map("athletes")
}

enum EntityType {
  ATHLETE
  TEAM
  SPORT
}

model UserRating {
  id          String     @id @default(uuid())
  userId      String     @map("user_id")
  entityType  EntityType
  entityId    Int
  rating      Int        // -5 to +5 rating
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  user        User       @relation(fields: [userId], references: [id])
  
  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@map("user_ratings")
}

enum TagSentiment {
  LOVE
  LOATHE
}

model UserTagline {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  entityType  EntityType
  entityId    Int
  sentiment   TagSentiment
  position    Int          // 0-3 for ordering the 4 tagline items
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  user        User         @relation(fields: [userId], references: [id])
  
  @@unique([userId, position])
  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@map("user_taglines")
}