generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  supabaseId String   @unique @map("supabase_id")
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // New fields for profile editing
  isConnecting    Boolean @default(true)
  firstName       String?
  lastName        String?
  location        String?
  birthDate       String?
  favoriteSports  String?
  profileImageUrl String?
  isAdmin         Boolean @default(false)

  // Relationship for ratings
  ratings  UserRating[]
  taglines UserTagline[]

  // Friend relationships
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  sweepstakeEntries  SweepstakeEntry[]
  createdSweepstakes Sweepstake[]

  @@map("users")
}

model Sport {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  teams    Team[]
  athletes Athlete[]
  games    Game[]

  @@map("sports")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  sportId   Int      @map("sport_id")
  sport     Sport    @relation(fields: [sportId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  athletes Athlete[]

  teamOneGames Game[]     @relation("GameTeamOne")
  teamTwoGames Game[]     @relation("GameTeamTwo")
  gamePicks    GamePick[]
  gameWins     Game[]     @relation("GameWinnerTeam")

  @@unique([name, sportId])
  @@index([sportId])
  @@map("teams")
}

model Athlete {
  id        Int      @id @default(autoincrement())
  name      String
  sportId   Int      @map("sport_id")
  teamId    Int      @map("team_id")
  sport     Sport    @relation(fields: [sportId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // New relations for player vs player games
  playerOneGames Game[]     @relation("GamePlayerOne")
  playerTwoGames Game[]     @relation("GamePlayerTwo")
  athletePicks   GamePick[] @relation("AthleteGamePick")
  gameWins       Game[]     @relation("GameWinnerPlayer")

  @@index([sportId])
  @@index([teamId])
  @@map("athletes")
}

enum EntityType {
  ATHLETE
  TEAM
  SPORT
}

model UserRating {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  entityType EntityType
  entityId   Int
  rating     Int // -5 to +5 rating
  position   Int? // Position for ordering the ratings (null means no specific position)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@map("user_ratings")
}

enum TagSentiment {
  // Positive Prefixes
  LOVES
  LOOKS_LIKE
  WATCHES
  IDOLIZES
  ADORES
  SUPPORTS
  // Negative Prefixes
  DETESTS
  LOATHES
  ROOTS_AGAINST
  LAUGHS_AT
  PITIES
  IS_SCARED_OF
}

model UserTagline {
  id         String       @id @default(uuid())
  userId     String       @map("user_id")
  entityType EntityType
  entityId   Int
  sentiment  TagSentiment
  position   Int // 0-3 for ordering the 4 tagline items
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, position])
  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@map("user_taglines")
}

enum SweepstakeStatus {
  ACTIVE
  COMPLETED
}

model Sweepstake {
  id        String           @id @default(uuid())
  name      String
  startDate DateTime         @map("start_date")
  endDate   DateTime         @map("end_date")
  prizePool Decimal          @map("prize_pool") @db.Decimal(10, 2)
  status    SweepstakeStatus @default(ACTIVE)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  createdById String @map("created_by_id")
  createdBy   User   @relation(fields: [createdById], references: [id])

  games   Game[]
  entries SweepstakeEntry[]

  @@index([createdById])
  @@map("sweepstakes")
}

model Game {
  id             String   @id @default(uuid())
  sweepstakeId   String   @map("sweepstake_id")
  sportId        Int      @map("sport_id")
  teamOneId      Int?     @map("team_one_id")
  teamTwoId      Int?     @map("team_two_id")
  playerOneId    Int?     @map("player_one_id")
  playerTwoId    Int?     @map("player_two_id")
  startTime      DateTime @map("start_time")
  isFinal        Boolean  @default(false) @map("is_final")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  winnerTeamId   Int?     @map("winner_team_id")
  winnerPlayerId Int?     @map("winner_player_id")
  isCompleted    Boolean  @default(false) @map("is_completed")

  sweepstake   Sweepstake @relation(fields: [sweepstakeId], references: [id])
  sport        Sport      @relation(fields: [sportId], references: [id])
  teamOne      Team?      @relation("GameTeamOne", fields: [teamOneId], references: [id])
  teamTwo      Team?      @relation("GameTeamTwo", fields: [teamTwoId], references: [id])
  playerOne    Athlete?   @relation("GamePlayerOne", fields: [playerOneId], references: [id])
  playerTwo    Athlete?   @relation("GamePlayerTwo", fields: [playerTwoId], references: [id])
  winnerTeam   Team?      @relation("GameWinnerTeam", fields: [winnerTeamId], references: [id])
  winnerPlayer Athlete?   @relation("GameWinnerPlayer", fields: [winnerPlayerId], references: [id])

  picks GamePick[]

  @@index([sweepstakeId])
  @@index([sportId])
  @@index([teamOneId])
  @@index([teamTwoId])
  @@index([playerOneId])
  @@index([playerTwoId])
  @@index([winnerTeamId])
  @@index([winnerPlayerId])
  @@map("games")
}

model SweepstakeEntry {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sweepstakeId String   @map("sweepstake_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user       User       @relation(fields: [userId], references: [id])
  sweepstake Sweepstake @relation(fields: [sweepstakeId], references: [id])

  picks GamePick[]

  @@unique([userId, sweepstakeId])
  @@index([userId])
  @@index([sweepstakeId])
  @@map("sweepstake_entries")
}

model GamePick {
  id                String   @id @default(uuid())
  sweepstakeEntryId String   @map("sweepstake_entry_id")
  gameId            String   @map("game_id")
  selectedTeamId    Int?     @map("selected_team_id")
  selectedAthleteId Int?     @map("selected_athlete_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  sweepstakeEntry SweepstakeEntry @relation(fields: [sweepstakeEntryId], references: [id])
  game            Game            @relation(fields: [gameId], references: [id])
  selectedTeam    Team?           @relation(fields: [selectedTeamId], references: [id])
  selectedAthlete Athlete?        @relation("AthleteGamePick", fields: [selectedAthleteId], references: [id])

  @@unique([sweepstakeEntryId, gameId])
  @@index([sweepstakeEntryId])
  @@index([gameId])
  @@index([selectedTeamId])
  @@index([selectedAthleteId])
  @@map("game_picks")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id          String           @id @default(uuid())
  requesterId String           @map("requester_id")
  addresseeId String           @map("addressee_id")
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  requester User @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
  @@map("friendships")
}
